[{"/Users/a/proc/form/src/App.js":"1","/Users/a/proc/form/src/container/Main.js":"2","/Users/a/proc/form/src/utils/utils.js":"3","/Users/a/proc/form/src/index.js":"4","/Users/a/proc/form/src/hooks/useDebounce.js":"5","/Users/a/proc/form/src/components/Benefit.js":"6"},{"size":397,"mtime":1607018819712,"results":"7","hashOfConfig":"8"},{"size":11217,"mtime":1607033522194,"results":"9","hashOfConfig":"8"},{"size":15425,"mtime":1607033609949,"results":"10","hashOfConfig":"8"},{"size":453,"mtime":1607018819715,"results":"11","hashOfConfig":"8"},{"size":473,"mtime":1607018819715,"results":"12","hashOfConfig":"8"},{"size":6053,"mtime":1607033529177,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15pogvs",{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/a/proc/form/src/App.js",[],"/Users/a/proc/form/src/container/Main.js",["28","29","30","31"],"/Users/a/proc/form/src/utils/utils.js",["32","33"],"/Users/a/proc/form/src/index.js",[],"/Users/a/proc/form/src/hooks/useDebounce.js",["34"],"import { useState, useEffect } from 'react';\n       \n// Hook\nexport function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n  \n    useEffect(\n      () => {\n        const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        return () => {\n          clearTimeout(handler);\n        };\n      },\n      [value, delay] \n    );\n  \n    return debouncedValue;\n  }\n\n  export default { useDebounce };","/Users/a/proc/form/src/components/Benefit.js",["35"],"import { useState } from 'react';\nimport { Input, Grid, Form, Button, Select } from 'semantic-ui-react'\nimport {\n    countryMap,\n    roleMap,\n    OwnershipRanges\n} from '../utils/utils';\n  \nconst Benefit = (props) => {\n    const { index, deleteForm, handleFormChange, formError } = props;\n    const currentErrorForm = formError.filter((form) => form.index === index)[0]\n\n    return <Grid.Row columns={1}>\n        <Grid.Column>\n            <Form>\n                <Form.Group widths='equal'>\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='First Name'\n                        type={'firstName'}\n                        onChange={handleFormChange}\n                        placeholder='Last name'\n                        error={currentErrorForm.firstName}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='Last Name'\n                        type={'lastName'}\n                        onChange={handleFormChange}\n                        placeholder='First name'\n                        error={currentErrorForm.lastName}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='Middle Name.'\n                        type={'middleName'}\n                        onChange={handleFormChange}\n                        placeholder='Middle Name'\n                        error={currentErrorForm.middleName}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='Date of Birth (mm/dd/yyyy)'\n                        type={'dob'}\n                        onChange={handleFormChange}\n                        placeholder='Date of Birth'\n                        error={currentErrorForm.dob}\n                    />\n\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='Address'\n                        type={'address'}\n                        onChange={handleFormChange}\n                        placeholder='Address'\n                        error={currentErrorForm.address}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='City'\n                        type={'city'}\n                        onChange={handleFormChange}\n                        placeholder='City'\n                        error={currentErrorForm.city}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='State'\n                        type={'state'}\n                        onChange={handleFormChange}\n                        placeholder='Last name'\n                        error={currentErrorForm.state}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='ZIP/Postal Code'\n                        type={'zip'}\n                        onChange={handleFormChange}\n                        placeholder='ZIP/Postal Code'\n                        error={currentErrorForm.zip}\n                    />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Select}\n                        label='Country'\n                        type={'country'}\n                        search\n                        options={countryMap}\n                        onChange={handleFormChange}\n                        placeholder='First name'\n                        error={currentErrorForm.country}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Input}\n                        label='SSN'\n                        type={'ssn'}\n                        onChange={handleFormChange}\n                        placeholder='SSN'\n                        error={currentErrorForm.ssn}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Select}\n                        label='Ownership Percentage (0.01 - 1.00)'\n                        type={'ownership'}\n                        search\n                        options={OwnershipRanges}\n                        onChange={handleFormChange}\n                        placeholder='Ownership Percentage'\n                        error={currentErrorForm.ownership}\n                    />\n                    <Form.Field\n                        id={index}\n                        required={true}\n                        control={Select}\n                        label='Role'\n                        type={'role'}\n                        search\n                        options={roleMap}\n                        onChange={handleFormChange}\n                        placeholder='Role'\n                        error={currentErrorForm.role}\n                    />\n                </Form.Group>\n                <Button id={index} negative onClick={(e) => {\n                    deleteForm(index)\n                }}>Delete</Button>\n            </Form>\n        </Grid.Column>\n    </Grid.Row>\n}\n\nexport default Benefit;",{"ruleId":"36","severity":1,"message":"37","line":2,"column":18,"nodeType":"38","messageId":"39","endLine":2,"endColumn":31},{"ruleId":"36","severity":1,"message":"40","line":3,"column":58,"nodeType":"38","messageId":"39","endLine":3,"endColumn":64},{"ruleId":"36","severity":1,"message":"41","line":7,"column":3,"nodeType":"38","messageId":"39","endLine":7,"endColumn":13},{"ruleId":"42","severity":1,"message":"43","line":118,"column":6,"nodeType":"44","endLine":118,"endColumn":24,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":119,"column":5,"nodeType":"48","messageId":"49","endLine":156,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":492,"column":1,"nodeType":"52","endLine":495,"endColumn":2},{"ruleId":"50","severity":1,"message":"51","line":22,"column":3,"nodeType":"52","endLine":22,"endColumn":34},{"ruleId":"36","severity":1,"message":"53","line":1,"column":10,"nodeType":"38","messageId":"39","endLine":1,"endColumn":18},"no-unused-vars","'fetchPolyfill' is defined but never used.","Identifier","unusedVar","'Select' is defined but never used.","'countryMap' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'validateBeneficial', 'validateController', 'validateLegal', and 'validateOwnership'. Either include them or remove the dependency array.","ArrayExpression",["54"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.",{"desc":"55","fix":"56"},"Update the dependencies array to be: [error, formError, validateBeneficial, validateController, validateLegal, validateOwnership]",{"range":"57","text":"58"},[3042,3060],"[error, formError, validateBeneficial, validateController, validateLegal, validateOwnership]"]